
VGA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080015d8  080015d8  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080015d8  080015d8  00003004  2**0
                  CONTENTS
  4 .ARM          00000000  080015d8  080015d8  00003004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015d8  080015d8  00003004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015d8  080015d8  000025d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015dc  080015dc  000025dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080015e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d18  20000004  080015e4  00003004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d1c  080015e4  00003d1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005817  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f50  00000000  00000000  0000884b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  000097a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000537  00000000  00000000  00009ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000d48b  00000000  00000000  0000a3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ec2  00000000  00000000  0001786a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00046bf2  00000000  00000000  0001c72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006331e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb4  00000000  00000000  00063364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00065218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080015c0 	.word	0x080015c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080015c0 	.word	0x080015c0

080001c8 <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	f003 031f 	and.w	r3, r3, #31
 80001d8:	2201      	movs	r2, #1
 80001da:	fa02 f103 	lsl.w	r1, r2, r3
 80001de:	4a06      	ldr	r2, [pc, #24]	@ (80001f8 <NVIC_EnableIRQ+0x30>)
 80001e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80001ea:	bf00      	nop
 80001ec:	370c      	adds	r7, #12
 80001ee:	46bd      	mov	sp, r7
 80001f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	e000e100 	.word	0xe000e100

080001fc <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	6039      	str	r1, [r7, #0]
 8000206:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800020c:	2b00      	cmp	r3, #0
 800020e:	da0b      	bge.n	8000228 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000210:	683b      	ldr	r3, [r7, #0]
 8000212:	b2da      	uxtb	r2, r3
 8000214:	490c      	ldr	r1, [pc, #48]	@ (8000248 <NVIC_SetPriority+0x4c>)
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 030f 	and.w	r3, r3, #15
 800021c:	3b04      	subs	r3, #4
 800021e:	0112      	lsls	r2, r2, #4
 8000220:	b2d2      	uxtb	r2, r2
 8000222:	440b      	add	r3, r1
 8000224:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000226:	e009      	b.n	800023c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	b2da      	uxtb	r2, r3
 800022c:	4907      	ldr	r1, [pc, #28]	@ (800024c <NVIC_SetPriority+0x50>)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	0112      	lsls	r2, r2, #4
 8000234:	b2d2      	uxtb	r2, r2
 8000236:	440b      	add	r3, r1
 8000238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	e000ed00 	.word	0xe000ed00
 800024c:	e000e100 	.word	0xe000e100

08000250 <main>:
#include "stm32_ub_vga_screen.h"
#include <math.h>


int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	SystemInit(); // System speed to 168MHz
 8000256:	f001 f8bb 	bl	80013d0 <SystemInit>

	UB_VGA_Screen_Init(); // Init VGA-Screen
 800025a:	f000 f931 	bl	80004c0 <UB_VGA_Screen_Init>
	UART2_Init_Interrupt(9600);
 800025e:	f44f 5016 	mov.w	r0, #9600	@ 0x2580
 8000262:	f000 f829 	bl	80002b8 <UART2_Init_Interrupt>
	uint16_t xp,yp;

	    for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 8000266:	2300      	movs	r3, #0
 8000268:	80bb      	strh	r3, [r7, #4]
 800026a:	e01f      	b.n	80002ac <main+0x5c>
	      for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 800026c:	2300      	movs	r3, #0
 800026e:	80fb      	strh	r3, [r7, #6]
 8000270:	e015      	b.n	800029e <main+0x4e>
	    	  if(xp < 200 && xp > 198)
 8000272:	88fb      	ldrh	r3, [r7, #6]
 8000274:	2bc7      	cmp	r3, #199	@ 0xc7
 8000276:	d809      	bhi.n	800028c <main+0x3c>
 8000278:	88fb      	ldrh	r3, [r7, #6]
 800027a:	2bc6      	cmp	r3, #198	@ 0xc6
 800027c:	d906      	bls.n	800028c <main+0x3c>
	    	  {
	    		  UB_VGA_SetPixel(xp, yp, VGA_COL_MAGENTA);
 800027e:	88b9      	ldrh	r1, [r7, #4]
 8000280:	88fb      	ldrh	r3, [r7, #6]
 8000282:	22e3      	movs	r2, #227	@ 0xe3
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f95b 	bl	8000540 <UB_VGA_SetPixel>
 800028a:	e005      	b.n	8000298 <main+0x48>
	    	  }
	    	  else
	    	  {
	    	       UB_VGA_SetPixel(xp, yp, VGA_COL_CYAN);
 800028c:	88b9      	ldrh	r1, [r7, #4]
 800028e:	88fb      	ldrh	r3, [r7, #6]
 8000290:	221f      	movs	r2, #31
 8000292:	4618      	mov	r0, r3
 8000294:	f000 f954 	bl	8000540 <UB_VGA_SetPixel>
	      for(xp = 0; xp < VGA_DISPLAY_X; xp++) {
 8000298:	88fb      	ldrh	r3, [r7, #6]
 800029a:	3301      	adds	r3, #1
 800029c:	80fb      	strh	r3, [r7, #6]
 800029e:	88fb      	ldrh	r3, [r7, #6]
 80002a0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80002a4:	d3e5      	bcc.n	8000272 <main+0x22>
	    for(yp = 0; yp < VGA_DISPLAY_Y; yp++) {
 80002a6:	88bb      	ldrh	r3, [r7, #4]
 80002a8:	3301      	adds	r3, #1
 80002aa:	80bb      	strh	r3, [r7, #4]
 80002ac:	88bb      	ldrh	r3, [r7, #4]
 80002ae:	2bef      	cmp	r3, #239	@ 0xef
 80002b0:	d9dc      	bls.n	800026c <main+0x1c>
	    	  }
	      }
	    }
  while(1)
 80002b2:	bf00      	nop
 80002b4:	e7fd      	b.n	80002b2 <main+0x62>
	...

080002b8 <UART2_Init_Interrupt>:
    while (count--) {
        __NOP(); // No operation (assembly instruction)
    }
}

void UART2_Init_Interrupt(uint32_t baudrate) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    // 1. Schakel de klokken in voor USART2 en GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // USART2-klok aan
 80002c0:	4b31      	ldr	r3, [pc, #196]	@ (8000388 <UART2_Init_Interrupt+0xd0>)
 80002c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80002c4:	4a30      	ldr	r2, [pc, #192]	@ (8000388 <UART2_Init_Interrupt+0xd0>)
 80002c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002ca:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // GPIOA-klok aan
 80002cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000388 <UART2_Init_Interrupt+0xd0>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000388 <UART2_Init_Interrupt+0xd0>)
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6313      	str	r3, [r2, #48]	@ 0x30

    // 2. Stel PA2 (TX) en PA3 (RX) in op alternatieve functie
    GPIOA->MODER &= ~((3 << (2 * 2)) | (3 << (3 * 2))); // Reset mode PA2 en PA3
 80002d8:	4b2c      	ldr	r3, [pc, #176]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a2b      	ldr	r2, [pc, #172]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2));    // Alternatieve functie
 80002e4:	4b29      	ldr	r3, [pc, #164]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a28      	ldr	r2, [pc, #160]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002ea:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80002ee:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (4 * 2)) | (7 << (4 * 3));   // Alternatieve functie 7 (USART2)
 80002f0:	4b26      	ldr	r3, [pc, #152]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002f2:	6a1b      	ldr	r3, [r3, #32]
 80002f4:	4a25      	ldr	r2, [pc, #148]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002f6:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80002fa:	6213      	str	r3, [r2, #32]
    GPIOA->OSPEEDR |= (3 << (2 * 2)) | (3 << (3 * 2));  // High speed voor PA2/PA3
 80002fc:	4b23      	ldr	r3, [pc, #140]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 80002fe:	689b      	ldr	r3, [r3, #8]
 8000300:	4a22      	ldr	r2, [pc, #136]	@ (800038c <UART2_Init_Interrupt+0xd4>)
 8000302:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000306:	6093      	str	r3, [r2, #8]

    // 3. Configureer USART2
    USART2->CR1 = 0; // Reset alle instellingen
 8000308:	4b21      	ldr	r3, [pc, #132]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 800030a:	2200      	movs	r2, #0
 800030c:	819a      	strh	r2, [r3, #12]
    USART2->BRR = SystemCoreClock / 4 / baudrate; // Stel baudrate in (APB1 = HCLK/4 standaard)
 800030e:	4b21      	ldr	r3, [pc, #132]	@ (8000394 <UART2_Init_Interrupt+0xdc>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	089a      	lsrs	r2, r3, #2
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	fbb2 f2f3 	udiv	r2, r2, r3
 800031a:	4b1d      	ldr	r3, [pc, #116]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 800031c:	b292      	uxth	r2, r2
 800031e:	811a      	strh	r2, [r3, #8]
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;  // Schakel transmitter en receiver in
 8000320:	4b1b      	ldr	r3, [pc, #108]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000322:	899b      	ldrh	r3, [r3, #12]
 8000324:	b29b      	uxth	r3, r3
 8000326:	4a1a      	ldr	r2, [pc, #104]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000328:	f043 030c 	orr.w	r3, r3, #12
 800032c:	b29b      	uxth	r3, r3
 800032e:	8193      	strh	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_RXNEIE;            // RX interrupt inschakelen
 8000330:	4b17      	ldr	r3, [pc, #92]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000332:	899b      	ldrh	r3, [r3, #12]
 8000334:	b29b      	uxth	r3, r3
 8000336:	4a16      	ldr	r2, [pc, #88]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000338:	f043 0320 	orr.w	r3, r3, #32
 800033c:	b29b      	uxth	r3, r3
 800033e:	8193      	strh	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_UE;                // Schakel USART2 in
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000342:	899b      	ldrh	r3, [r3, #12]
 8000344:	b29b      	uxth	r3, r3
 8000346:	4a12      	ldr	r2, [pc, #72]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000348:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800034c:	b29b      	uxth	r3, r3
 800034e:	8193      	strh	r3, [r2, #12]
    USART2->CR2 &= ~USART_CR2_STOP; // Zet op 1 stopbit
 8000350:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000352:	8a1b      	ldrh	r3, [r3, #16]
 8000354:	b29b      	uxth	r3, r3
 8000356:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000358:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800035c:	b29b      	uxth	r3, r3
 800035e:	8213      	strh	r3, [r2, #16]
    USART2->CR1 &= ~USART_CR1_M; // Zet op 8 data bits
 8000360:	4b0b      	ldr	r3, [pc, #44]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000362:	899b      	ldrh	r3, [r3, #12]
 8000364:	b29b      	uxth	r3, r3
 8000366:	4a0a      	ldr	r2, [pc, #40]	@ (8000390 <UART2_Init_Interrupt+0xd8>)
 8000368:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800036c:	b29b      	uxth	r3, r3
 800036e:	8193      	strh	r3, [r2, #12]

    // 4. Configureer NVIC voor USART2
    NVIC_SetPriority(USART2_IRQn, 1); // Zet interrupt prioriteit
 8000370:	2101      	movs	r1, #1
 8000372:	2026      	movs	r0, #38	@ 0x26
 8000374:	f7ff ff42 	bl	80001fc <NVIC_SetPriority>
    NVIC_EnableIRQ(USART2_IRQn);      // Schakel USART2 interrupt in
 8000378:	2026      	movs	r0, #38	@ 0x26
 800037a:	f7ff ff25 	bl	80001c8 <NVIC_EnableIRQ>
}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800
 800038c:	40020000 	.word	0x40020000
 8000390:	40004400 	.word	0x40004400
 8000394:	20000000 	.word	0x20000000

08000398 <UART2_SendChar>:


void UART2_SendChar(char c) {
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Wacht tot de TX buffer leeg is
 80003a2:	bf00      	nop
 80003a4:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <UART2_SendChar+0x30>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d0f8      	beq.n	80003a4 <UART2_SendChar+0xc>
    USART2->DR = c;                      // Stuur een karakter
 80003b2:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <UART2_SendChar+0x30>)
 80003b4:	79fa      	ldrb	r2, [r7, #7]
 80003b6:	b292      	uxth	r2, r2
 80003b8:	809a      	strh	r2, [r3, #4]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40004400 	.word	0x40004400

080003cc <USART2_IRQHandler>:
        buffer[i++] = c;
    }
    buffer[i] = '\0'; // Sluit de string af
}

void USART2_IRQHandler(void) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
    if (USART2->SR & USART_SR_RXNE) { // Controleer of data ontvangen is
 80003d2:	4b09      	ldr	r3, [pc, #36]	@ (80003f8 <USART2_IRQHandler+0x2c>)
 80003d4:	881b      	ldrh	r3, [r3, #0]
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	f003 0320 	and.w	r3, r3, #32
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d007      	beq.n	80003f0 <USART2_IRQHandler+0x24>
        char received = USART2->DR;  // Lees de data uit
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <USART2_IRQHandler+0x2c>)
 80003e2:	889b      	ldrh	r3, [r3, #4]
 80003e4:	b29b      	uxth	r3, r3
 80003e6:	71fb      	strb	r3, [r7, #7]
        // Voeg hier verwerking van ontvangen data toe
        UART2_SendChar(received);    // Echo bijvoorbeeld terug
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffd4 	bl	8000398 <UART2_SendChar>
    }
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40004400 	.word	0x40004400

080003fc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
 8000408:	2300      	movs	r3, #0
 800040a:	73bb      	strb	r3, [r7, #14]
 800040c:	230f      	movs	r3, #15
 800040e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	78db      	ldrb	r3, [r3, #3]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d039      	beq.n	800048c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <NVIC_Init+0xbc>)
 800041a:	68db      	ldr	r3, [r3, #12]
 800041c:	43db      	mvns	r3, r3
 800041e:	0a1b      	lsrs	r3, r3, #8
 8000420:	b2db      	uxtb	r3, r3
 8000422:	f003 0307 	and.w	r3, r3, #7
 8000426:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	f1c3 0304 	rsb	r3, r3, #4
 800042e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000430:	7b7a      	ldrb	r2, [r7, #13]
 8000432:	7bfb      	ldrb	r3, [r7, #15]
 8000434:	fa42 f303 	asr.w	r3, r2, r3
 8000438:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	461a      	mov	r2, r3
 8000440:	7bbb      	ldrb	r3, [r7, #14]
 8000442:	fa02 f303 	lsl.w	r3, r2, r3
 8000446:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	789a      	ldrb	r2, [r3, #2]
 800044c:	7b7b      	ldrb	r3, [r7, #13]
 800044e:	4013      	ands	r3, r2
 8000450:	b2da      	uxtb	r2, r3
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	4313      	orrs	r3, r2
 8000456:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000458:	7bfb      	ldrb	r3, [r7, #15]
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800045e:	4a17      	ldr	r2, [pc, #92]	@ (80004bc <NVIC_Init+0xc0>)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4413      	add	r3, r2
 8000466:	7bfa      	ldrb	r2, [r7, #15]
 8000468:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000474:	4911      	ldr	r1, [pc, #68]	@ (80004bc <NVIC_Init+0xc0>)
 8000476:	687a      	ldr	r2, [r7, #4]
 8000478:	7812      	ldrb	r2, [r2, #0]
 800047a:	0952      	lsrs	r2, r2, #5
 800047c:	b2d2      	uxtb	r2, r2
 800047e:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000480:	2201      	movs	r2, #1
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000486:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800048a:	e00f      	b.n	80004ac <NVIC_Init+0xb0>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000494:	4909      	ldr	r1, [pc, #36]	@ (80004bc <NVIC_Init+0xc0>)
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	7812      	ldrb	r2, [r2, #0]
 800049a:	0952      	lsrs	r2, r2, #5
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80004a0:	2201      	movs	r2, #1
 80004a2:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80004a4:	f100 0320 	add.w	r3, r0, #32
 80004a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	e000ed00 	.word	0xe000ed00
 80004bc:	e000e100 	.word	0xe000e100

080004c0 <UB_VGA_Screen_Init>:
uint8_t VGA_RAM1[(VGA_DISPLAY_X+1)*VGA_DISPLAY_Y];  // Definieer het RAM
//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 80004c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000534 <UB_VGA_Screen_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <UB_VGA_Screen_Init+0x74>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 80004d2:	4b18      	ldr	r3, [pc, #96]	@ (8000534 <UB_VGA_Screen_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80004d8:	2300      	movs	r3, #0
 80004da:	80bb      	strh	r3, [r7, #4]
 80004dc:	e017      	b.n	800050e <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 80004de:	2300      	movs	r3, #0
 80004e0:	80fb      	strh	r3, [r7, #6]
 80004e2:	e00d      	b.n	8000500 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 80004e4:	88ba      	ldrh	r2, [r7, #4]
 80004e6:	4613      	mov	r3, r2
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	4413      	add	r3, r2
 80004ec:	019b      	lsls	r3, r3, #6
 80004ee:	441a      	add	r2, r3
 80004f0:	88fb      	ldrh	r3, [r7, #6]
 80004f2:	4413      	add	r3, r2
 80004f4:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <UB_VGA_Screen_Init+0x78>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 80004fa:	88fb      	ldrh	r3, [r7, #6]
 80004fc:	3301      	adds	r3, #1
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	88fb      	ldrh	r3, [r7, #6]
 8000502:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000506:	d9ed      	bls.n	80004e4 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000508:	88bb      	ldrh	r3, [r7, #4]
 800050a:	3301      	adds	r3, #1
 800050c:	80bb      	strh	r3, [r7, #4]
 800050e:	88bb      	ldrh	r3, [r7, #4]
 8000510:	2bef      	cmp	r3, #239	@ 0xef
 8000512:	d9e4      	bls.n	80004de <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8000514:	f000 f83c 	bl	8000590 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8000518:	f000 f88e 	bl	8000638 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 800051c:	f000 f91e 	bl	800075c <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8000520:	f000 f8f0 	bl	8000704 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8000524:	4b05      	ldr	r3, [pc, #20]	@ (800053c <UB_VGA_Screen_Init+0x7c>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a02      	ldr	r2, [pc, #8]	@ (8000534 <UB_VGA_Screen_Init+0x74>)
 800052a:	6093      	str	r3, [r2, #8]
}
 800052c:	bf00      	nop
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	20000020 	.word	0x20000020
 8000538:	2000002c 	.word	0x2000002c
 800053c:	40026488 	.word	0x40026488

08000540 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	4603      	mov	r3, r0
 8000548:	80fb      	strh	r3, [r7, #6]
 800054a:	460b      	mov	r3, r1
 800054c:	80bb      	strh	r3, [r7, #4]
 800054e:	4613      	mov	r3, r2
 8000550:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8000552:	88fb      	ldrh	r3, [r7, #6]
 8000554:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000558:	d301      	bcc.n	800055e <UB_VGA_SetPixel+0x1e>
 800055a:	2300      	movs	r3, #0
 800055c:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 800055e:	88bb      	ldrh	r3, [r7, #4]
 8000560:	2bef      	cmp	r3, #239	@ 0xef
 8000562:	d901      	bls.n	8000568 <UB_VGA_SetPixel+0x28>
 8000564:	2300      	movs	r3, #0
 8000566:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8000568:	88ba      	ldrh	r2, [r7, #4]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	019b      	lsls	r3, r3, #6
 8000572:	441a      	add	r2, r3
 8000574:	88fb      	ldrh	r3, [r7, #6]
 8000576:	4413      	add	r3, r2
 8000578:	4904      	ldr	r1, [pc, #16]	@ (800058c <UB_VGA_SetPixel+0x4c>)
 800057a:	78fa      	ldrb	r2, [r7, #3]
 800057c:	54ca      	strb	r2, [r1, r3]
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	2000002c 	.word	0x2000002c

08000590 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000596:	2101      	movs	r1, #1
 8000598:	2010      	movs	r0, #16
 800059a:	f000 fc8b 	bl	8000eb4 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 800059e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80005a2:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80005a4:	2301      	movs	r3, #1
 80005a6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005a8:	2300      	movs	r3, #0
 80005aa:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80005ac:	2301      	movs	r3, #1
 80005ae:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80005b0:	2303      	movs	r3, #3
 80005b2:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	481d      	ldr	r0, [pc, #116]	@ (8000630 <P_VGA_InitIO+0xa0>)
 80005ba:	f000 fba3 	bl	8000d04 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <P_VGA_InitIO+0xa0>)
 80005c0:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80005c4:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80005c6:	2101      	movs	r1, #1
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 fc73 	bl	8000eb4 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 80005ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80005d4:	2302      	movs	r3, #2
 80005d6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80005d8:	2303      	movs	r3, #3
 80005da:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80005dc:	2300      	movs	r3, #0
 80005de:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80005e0:	2301      	movs	r3, #1
 80005e2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	4812      	ldr	r0, [pc, #72]	@ (8000634 <P_VGA_InitIO+0xa4>)
 80005ea:	f000 fb8b 	bl	8000d04 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 80005ee:	2201      	movs	r2, #1
 80005f0:	210b      	movs	r1, #11
 80005f2:	4810      	ldr	r0, [pc, #64]	@ (8000634 <P_VGA_InitIO+0xa4>)
 80005f4:	f000 fc15 	bl	8000e22 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80005f8:	2101      	movs	r1, #1
 80005fa:	2002      	movs	r0, #2
 80005fc:	f000 fc5a 	bl	8000eb4 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000600:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000604:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000606:	2301      	movs	r3, #1
 8000608:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800060a:	2300      	movs	r3, #0
 800060c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800060e:	2301      	movs	r3, #1
 8000610:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000612:	2303      	movs	r3, #3
 8000614:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000616:	463b      	mov	r3, r7
 8000618:	4619      	mov	r1, r3
 800061a:	4806      	ldr	r0, [pc, #24]	@ (8000634 <P_VGA_InitIO+0xa4>)
 800061c:	f000 fb72 	bl	8000d04 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8000620:	4b04      	ldr	r3, [pc, #16]	@ (8000634 <P_VGA_InitIO+0xa4>)
 8000622:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000626:	831a      	strh	r2, [r3, #24]
}
 8000628:	bf00      	nop
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	40020400 	.word	0x40020400

08000638 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 800063e:	2101      	movs	r1, #1
 8000640:	2001      	movs	r0, #1
 8000642:	f000 fc77 	bl	8000f34 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8000646:	230b      	movs	r3, #11
 8000648:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 800064a:	2300      	movs	r3, #0
 800064c:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000652:	2300      	movs	r3, #0
 8000654:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4828      	ldr	r0, [pc, #160]	@ (8000700 <P_VGA_InitTIM+0xc8>)
 800065e:	f000 fc89 	bl	8000f74 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000662:	2101      	movs	r1, #1
 8000664:	2001      	movs	r0, #1
 8000666:	f000 fc45 	bl	8000ef4 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 800066a:	f640 236b 	movw	r3, #2667	@ 0xa6b
 800066e:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000670:	2300      	movs	r3, #0
 8000672:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000678:	2300      	movs	r3, #0
 800067a:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800067c:	f107 0314 	add.w	r3, r7, #20
 8000680:	4619      	mov	r1, r3
 8000682:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000686:	f000 fc75 	bl	8000f74 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800068a:	2360      	movs	r3, #96	@ 0x60
 800068c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800068e:	2301      	movs	r3, #1
 8000690:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8000692:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8000696:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000698:	2302      	movs	r3, #2
 800069a:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006a4:	f000 fd12 	bl	80010cc <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80006a8:	2108      	movs	r1, #8
 80006aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006ae:	f000 fdfb 	bl	80012a8 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80006b2:	2360      	movs	r3, #96	@ 0x60
 80006b4:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80006b6:	2301      	movs	r3, #1
 80006b8:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 80006ba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006be:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80006c0:	2302      	movs	r3, #2
 80006c2:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 80006c4:	463b      	mov	r3, r7
 80006c6:	4619      	mov	r1, r3
 80006c8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006cc:	f000 fd84 	bl	80011d8 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80006d0:	2108      	movs	r1, #8
 80006d2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006d6:	f000 fe03 	bl	80012e0 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 80006da:	2101      	movs	r1, #1
 80006dc:	4808      	ldr	r0, [pc, #32]	@ (8000700 <P_VGA_InitTIM+0xc8>)
 80006de:	f000 fcb5 	bl	800104c <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 80006e2:	2101      	movs	r1, #1
 80006e4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006e8:	f000 fcb0 	bl	800104c <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 80006ec:	2101      	movs	r1, #1
 80006ee:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80006f2:	f000 fccb 	bl	800108c <TIM_Cmd>

}
 80006f6:	bf00      	nop
 80006f8:	3720      	adds	r7, #32
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40010000 	.word	0x40010000

08000704 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 800070a:	2201      	movs	r2, #1
 800070c:	2110      	movs	r1, #16
 800070e:	4812      	ldr	r0, [pc, #72]	@ (8000758 <P_VGA_InitINT+0x54>)
 8000710:	f000 fa38 	bl	8000b84 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8000714:	2344      	movs	r3, #68	@ 0x44
 8000716:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000720:	2301      	movs	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff fe68 	bl	80003fc <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 800072c:	2201      	movs	r2, #1
 800072e:	2108      	movs	r1, #8
 8000730:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8000734:	f000 fdf2 	bl	800131c <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8000738:	231c      	movs	r3, #28
 800073a:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000744:	2301      	movs	r3, #1
 8000746:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fe56 	bl	80003fc <NVIC_Init>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40026488 	.word	0x40026488

0800075c <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b090      	sub	sp, #64	@ 0x40
 8000760:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8000762:	2101      	movs	r1, #1
 8000764:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8000768:	f000 fba4 	bl	8000eb4 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 800076c:	2100      	movs	r1, #0
 800076e:	481b      	ldr	r0, [pc, #108]	@ (80007dc <P_VGA_InitDMA+0x80>)
 8000770:	f000 f9ec 	bl	8000b4c <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8000774:	4819      	ldr	r0, [pc, #100]	@ (80007dc <P_VGA_InitDMA+0x80>)
 8000776:	f000 f8bd 	bl	80008f4 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 800077a:	f04f 6340 	mov.w	r3, #201326592	@ 0xc000000
 800077e:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <P_VGA_InitDMA+0x84>)
 8000782:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8000784:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <P_VGA_InitDMA+0x88>)
 8000786:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 800078c:	f240 1341 	movw	r3, #321	@ 0x141
 8000790:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8000796:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800079a:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80007a8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80007ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80007b2:	2301      	movs	r3, #1
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80007ba:	2300      	movs	r3, #0
 80007bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <P_VGA_InitDMA+0x80>)
 80007c4:	f000 f96a 	bl	8000a9c <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007ce:	4806      	ldr	r0, [pc, #24]	@ (80007e8 <P_VGA_InitDMA+0x8c>)
 80007d0:	f000 fdd9 	bl	8001386 <TIM_DMACmd>
}
 80007d4:	bf00      	nop
 80007d6:	3740      	adds	r7, #64	@ 0x40
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40026488 	.word	0x40026488
 80007e0:	40021015 	.word	0x40021015
 80007e4:	2000002c 	.word	0x2000002c
 80007e8:	40010000 	.word	0x40010000

080007ec <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 80007f0:	2108      	movs	r1, #8
 80007f2:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80007f6:	f000 fdb5 	bl	8001364 <TIM_ClearITPendingBit>
//  NVIC->ISPR[0] = 0x10000000;
//  NVIC->ICPR[0] = 0x10000000;
//  TIM2->SR = (uint16_t)~((uint16_t)0x0008);


  VGA.hsync_cnt++;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000804:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8000806:	4b23      	ldr	r3, [pc, #140]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 800080e:	d905      	bls.n	800081c <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8000810:	4b20      	ldr	r3, [pc, #128]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000812:	2200      	movs	r2, #0
 8000814:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8000816:	4a20      	ldr	r2, [pc, #128]	@ (8000898 <TIM2_IRQHandler+0xac>)
 8000818:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 800081a:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 800081c:	4b1d      	ldr	r3, [pc, #116]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d804      	bhi.n	800082e <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <TIM2_IRQHandler+0xb0>)
 8000826:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800082a:	835a      	strh	r2, [r3, #26]
 800082c:	e003      	b.n	8000836 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <TIM2_IRQHandler+0xb0>)
 8000830:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000834:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	2b23      	cmp	r3, #35	@ 0x23
 800083c:	d927      	bls.n	800088e <TIM2_IRQHandler+0xa2>
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000840:	881b      	ldrh	r3, [r3, #0]
 8000842:	f240 2202 	movw	r2, #514	@ 0x202
 8000846:	4293      	cmp	r3, r2
 8000848:	d821      	bhi.n	800088e <TIM2_IRQHandler+0xa2>
    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <TIM2_IRQHandler+0xb4>)
 800084c:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 800084e:	689b      	ldr	r3, [r3, #8]
 8000850:	6013      	str	r3, [r2, #0]
    // set address
    DMA2_Stream5->M0AR=VGA.start_adr;
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <TIM2_IRQHandler+0xb4>)
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 800085a:	4b12      	ldr	r3, [pc, #72]	@ (80008a4 <TIM2_IRQHandler+0xb8>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	b29b      	uxth	r3, r3
 8000860:	4a10      	ldr	r2, [pc, #64]	@ (80008a4 <TIM2_IRQHandler+0xb8>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	b29b      	uxth	r3, r3
 8000868:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 800086a:	4b0d      	ldr	r3, [pc, #52]	@ (80008a0 <TIM2_IRQHandler+0xb4>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a0c      	ldr	r2, [pc, #48]	@ (80008a0 <TIM2_IRQHandler+0xb4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	2b00      	cmp	r3, #0
 8000880:	d005      	beq.n	800088e <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8000882:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f203 1341 	addw	r3, r3, #321	@ 0x141
 800088a:	4a02      	ldr	r2, [pc, #8]	@ (8000894 <TIM2_IRQHandler+0xa8>)
 800088c:	6053      	str	r3, [r2, #4]
    }
  }

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000020 	.word	0x20000020
 8000898:	2000002c 	.word	0x2000002c
 800089c:	40020400 	.word	0x40020400
 80008a0:	40026488 	.word	0x40026488
 80008a4:	40010000 	.word	0x40010000

080008a8 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 80008ac:	490d      	ldr	r1, [pc, #52]	@ (80008e4 <DMA2_Stream5_IRQHandler+0x3c>)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <DMA2_Stream5_IRQHandler+0x40>)
 80008b0:	f000 f9a2 	bl	8000bf8 <DMA_GetITStatus>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d012      	beq.n	80008e0 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 80008ba:	490a      	ldr	r1, [pc, #40]	@ (80008e4 <DMA2_Stream5_IRQHandler+0x3c>)
 80008bc:	480a      	ldr	r0, [pc, #40]	@ (80008e8 <DMA2_Stream5_IRQHandler+0x40>)
 80008be:	f000 f9f3 	bl	8000ca8 <DMA_ClearITPendingBit>
//    DMA2->HISR = 0x440;
//    DMA2->HISR = (uint32_t)(((uint32_t)0x20008800) & (uint32_t)0x0F7D0F7D );
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <DMA2_Stream5_IRQHandler+0x44>)
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <DMA2_Stream5_IRQHandler+0x44>)
 80008ca:	f023 0301 	bic.w	r3, r3, #1
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 80008d2:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <DMA2_Stream5_IRQHandler+0x40>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80008d8:	4b05      	ldr	r3, [pc, #20]	@ (80008f0 <DMA2_Stream5_IRQHandler+0x48>)
 80008da:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 80008de:	835a      	strh	r2, [r3, #26]
  }
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20008800 	.word	0x20008800
 80008e8:	40026488 	.word	0x40026488
 80008ec:	40010000 	.word	0x40010000
 80008f0:	40021000 	.word	0x40021000

080008f4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f023 0201 	bic.w	r2, r3, #1
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2221      	movs	r2, #33	@ 0x21
 800092a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	4a46      	ldr	r2, [pc, #280]	@ (8000a48 <DMA_DeInit+0x154>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d103      	bne.n	800093c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000934:	4b45      	ldr	r3, [pc, #276]	@ (8000a4c <DMA_DeInit+0x158>)
 8000936:	223d      	movs	r2, #61	@ 0x3d
 8000938:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 800093a:	e07e      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a44      	ldr	r2, [pc, #272]	@ (8000a50 <DMA_DeInit+0x15c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d104      	bne.n	800094e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000944:	4b41      	ldr	r3, [pc, #260]	@ (8000a4c <DMA_DeInit+0x158>)
 8000946:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 800094a:	609a      	str	r2, [r3, #8]
}
 800094c:	e075      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a40      	ldr	r2, [pc, #256]	@ (8000a54 <DMA_DeInit+0x160>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d104      	bne.n	8000960 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000956:	4b3d      	ldr	r3, [pc, #244]	@ (8000a4c <DMA_DeInit+0x158>)
 8000958:	f44f 1274 	mov.w	r2, #3997696	@ 0x3d0000
 800095c:	609a      	str	r2, [r3, #8]
}
 800095e:	e06c      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3d      	ldr	r2, [pc, #244]	@ (8000a58 <DMA_DeInit+0x164>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d104      	bne.n	8000972 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000968:	4b38      	ldr	r3, [pc, #224]	@ (8000a4c <DMA_DeInit+0x158>)
 800096a:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 800096e:	609a      	str	r2, [r3, #8]
}
 8000970:	e063      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a39      	ldr	r2, [pc, #228]	@ (8000a5c <DMA_DeInit+0x168>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d103      	bne.n	8000982 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 800097a:	4b34      	ldr	r3, [pc, #208]	@ (8000a4c <DMA_DeInit+0x158>)
 800097c:	4a38      	ldr	r2, [pc, #224]	@ (8000a60 <DMA_DeInit+0x16c>)
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	e05b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a37      	ldr	r2, [pc, #220]	@ (8000a64 <DMA_DeInit+0x170>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d103      	bne.n	8000992 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800098a:	4b30      	ldr	r3, [pc, #192]	@ (8000a4c <DMA_DeInit+0x158>)
 800098c:	4a36      	ldr	r2, [pc, #216]	@ (8000a68 <DMA_DeInit+0x174>)
 800098e:	60da      	str	r2, [r3, #12]
}
 8000990:	e053      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a35      	ldr	r2, [pc, #212]	@ (8000a6c <DMA_DeInit+0x178>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d103      	bne.n	80009a2 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800099a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a4c <DMA_DeInit+0x158>)
 800099c:	4a34      	ldr	r2, [pc, #208]	@ (8000a70 <DMA_DeInit+0x17c>)
 800099e:	60da      	str	r2, [r3, #12]
}
 80009a0:	e04b      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a33      	ldr	r2, [pc, #204]	@ (8000a74 <DMA_DeInit+0x180>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d104      	bne.n	80009b4 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 80009aa:	4b28      	ldr	r3, [pc, #160]	@ (8000a4c <DMA_DeInit+0x158>)
 80009ac:	f04f 523d 	mov.w	r2, #792723456	@ 0x2f400000
 80009b0:	60da      	str	r2, [r3, #12]
}
 80009b2:	e042      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	4a30      	ldr	r2, [pc, #192]	@ (8000a78 <DMA_DeInit+0x184>)
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d103      	bne.n	80009c4 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 80009bc:	4b2f      	ldr	r3, [pc, #188]	@ (8000a7c <DMA_DeInit+0x188>)
 80009be:	223d      	movs	r2, #61	@ 0x3d
 80009c0:	609a      	str	r2, [r3, #8]
}
 80009c2:	e03a      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	4a2e      	ldr	r2, [pc, #184]	@ (8000a80 <DMA_DeInit+0x18c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d104      	bne.n	80009d6 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 80009cc:	4b2b      	ldr	r3, [pc, #172]	@ (8000a7c <DMA_DeInit+0x188>)
 80009ce:	f44f 6274 	mov.w	r2, #3904	@ 0xf40
 80009d2:	609a      	str	r2, [r3, #8]
}
 80009d4:	e031      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a84 <DMA_DeInit+0x190>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d104      	bne.n	80009e8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 80009de:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <DMA_DeInit+0x188>)
 80009e0:	f44f 1274 	mov.w	r2, #3997696	@ 0x3d0000
 80009e4:	609a      	str	r2, [r3, #8]
}
 80009e6:	e028      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a27      	ldr	r2, [pc, #156]	@ (8000a88 <DMA_DeInit+0x194>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d104      	bne.n	80009fa <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80009f0:	4b22      	ldr	r3, [pc, #136]	@ (8000a7c <DMA_DeInit+0x188>)
 80009f2:	f04f 6274 	mov.w	r2, #255852544	@ 0xf400000
 80009f6:	609a      	str	r2, [r3, #8]
}
 80009f8:	e01f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <DMA_DeInit+0x198>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d103      	bne.n	8000a0a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <DMA_DeInit+0x188>)
 8000a04:	4a16      	ldr	r2, [pc, #88]	@ (8000a60 <DMA_DeInit+0x16c>)
 8000a06:	60da      	str	r2, [r3, #12]
}
 8000a08:	e017      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a20      	ldr	r2, [pc, #128]	@ (8000a90 <DMA_DeInit+0x19c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d103      	bne.n	8000a1a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <DMA_DeInit+0x188>)
 8000a14:	4a14      	ldr	r2, [pc, #80]	@ (8000a68 <DMA_DeInit+0x174>)
 8000a16:	60da      	str	r2, [r3, #12]
}
 8000a18:	e00f      	b.n	8000a3a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a94 <DMA_DeInit+0x1a0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d103      	bne.n	8000a2a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <DMA_DeInit+0x188>)
 8000a24:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <DMA_DeInit+0x17c>)
 8000a26:	60da      	str	r2, [r3, #12]
}
 8000a28:	e007      	b.n	8000a3a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <DMA_DeInit+0x1a4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d103      	bne.n	8000a3a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <DMA_DeInit+0x188>)
 8000a34:	f04f 523d 	mov.w	r2, #792723456	@ 0x2f400000
 8000a38:	60da      	str	r2, [r3, #12]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40026010 	.word	0x40026010
 8000a4c:	40026000 	.word	0x40026000
 8000a50:	40026028 	.word	0x40026028
 8000a54:	40026040 	.word	0x40026040
 8000a58:	40026058 	.word	0x40026058
 8000a5c:	40026070 	.word	0x40026070
 8000a60:	2000003d 	.word	0x2000003d
 8000a64:	40026088 	.word	0x40026088
 8000a68:	20000f40 	.word	0x20000f40
 8000a6c:	400260a0 	.word	0x400260a0
 8000a70:	203d0000 	.word	0x203d0000
 8000a74:	400260b8 	.word	0x400260b8
 8000a78:	40026410 	.word	0x40026410
 8000a7c:	40026400 	.word	0x40026400
 8000a80:	40026428 	.word	0x40026428
 8000a84:	40026440 	.word	0x40026440
 8000a88:	40026458 	.word	0x40026458
 8000a8c:	40026470 	.word	0x40026470
 8000a90:	40026488 	.word	0x40026488
 8000a94:	400264a0 	.word	0x400264a0
 8000a98:	400264b8 	.word	0x400264b8

08000a9c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	4b25      	ldr	r3, [pc, #148]	@ (8000b48 <DMA_Init+0xac>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ac6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ad2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	6a1b      	ldr	r3, [r3, #32]
 8000ad8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ade:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000aea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000af0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	f023 0307 	bic.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b14:	4313      	orrs	r3, r2
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68fa      	ldr	r2, [r7, #12]
 8000b20:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	691a      	ldr	r2, [r3, #16]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	689a      	ldr	r2, [r3, #8]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	f01c803f 	.word	0xf01c803f

08000b4c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b58:	78fb      	ldrb	r3, [r7, #3]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f043 0201 	orr.w	r2, r3, #1
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b6a:	e005      	b.n	8000b78 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f023 0201 	bic.w	r2, r3, #1
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00f      	beq.n	8000bbc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d006      	beq.n	8000bb0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	695b      	ldr	r3, [r3, #20]
 8000ba6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	615a      	str	r2, [r3, #20]
 8000bae:	e005      	b.n	8000bbc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	2b80      	cmp	r3, #128	@ 0x80
 8000bc0:	d014      	beq.n	8000bec <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d008      	beq.n	8000bda <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f003 031e 	and.w	r3, r3, #30
 8000bd2:	431a      	orrs	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000bd8:	e008      	b.n	8000bec <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	f003 031e 	and.w	r3, r3, #30
 8000be4:	43db      	mvns	r3, r3
 8000be6:	401a      	ands	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	601a      	str	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000c02:	2300      	movs	r3, #0
 8000c04:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <DMA_GetITStatus+0xa4>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d802      	bhi.n	8000c1c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c16:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <DMA_GetITStatus+0xa8>)
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	e001      	b.n	8000c20 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c1c:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <DMA_GetITStatus+0xac>)
 8000c1e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	f023 23f0 	bic.w	r3, r3, #4026593280	@ 0xf000f000
 8000c26:	f023 13c3 	bic.w	r3, r3, #12779715	@ 0xc300c3
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	0adb      	lsrs	r3, r3, #11
 8000c32:	f003 031e 	and.w	r3, r3, #30
 8000c36:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	e004      	b.n	8000c4e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c4c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e002      	b.n	8000c66 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f023 23f0 	bic.w	r3, r3, #4026593280	@ 0xf000f000
 8000c6c:	f023 1382 	bic.w	r3, r3, #8519810	@ 0x820082
 8000c70:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	4013      	ands	r3, r2
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d005      	beq.n	8000c88 <DMA_GetITStatus+0x90>
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d002      	beq.n	8000c88 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000c82:	2301      	movs	r3, #1
 8000c84:	75fb      	strb	r3, [r7, #23]
 8000c86:	e001      	b.n	8000c8c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	371c      	adds	r7, #28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	4002640f 	.word	0x4002640f
 8000ca0:	40026000 	.word	0x40026000
 8000ca4:	40026400 	.word	0x40026400

08000ca8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a10      	ldr	r2, [pc, #64]	@ (8000cf8 <DMA_ClearITPendingBit+0x50>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d802      	bhi.n	8000cc0 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <DMA_ClearITPendingBit+0x54>)
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	e001      	b.n	8000cc4 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <DMA_ClearITPendingBit+0x58>)
 8000cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d007      	beq.n	8000cde <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	f023 23f0 	bic.w	r3, r3, #4026593280	@ 0xf000f000
 8000cd4:	f023 1382 	bic.w	r3, r3, #8519810	@ 0x820082
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000cdc:	e006      	b.n	8000cec <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f023 23f0 	bic.w	r3, r3, #4026593280	@ 0xf000f000
 8000ce4:	f023 1382 	bic.w	r3, r3, #8519810	@ 0x820082
 8000ce8:	68fa      	ldr	r2, [r7, #12]
 8000cea:	6093      	str	r3, [r2, #8]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	4002640f 	.word	0x4002640f
 8000cfc:	40026000 	.word	0x40026000
 8000d00:	40026400 	.word	0x40026400

08000d04 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	e076      	b.n	8000e0e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000d20:	2201      	movs	r2, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4013      	ands	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000d34:	68fa      	ldr	r2, [r7, #12]
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d165      	bne.n	8000e08 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	2103      	movs	r1, #3
 8000d46:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4a:	43db      	mvns	r3, r3
 8000d4c:	401a      	ands	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	791b      	ldrb	r3, [r3, #4]
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
 8000d64:	431a      	orrs	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d003      	beq.n	8000d7a <GPIO_Init+0x76>
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	791b      	ldrb	r3, [r3, #4]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d12e      	bne.n	8000dd8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2103      	movs	r1, #3
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	795b      	ldrb	r3, [r3, #5]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	431a      	orrs	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685a      	ldr	r2, [r3, #4]
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4619      	mov	r1, r3
 8000db2:	2301      	movs	r3, #1
 8000db4:	408b      	lsls	r3, r1
 8000db6:	43db      	mvns	r3, r3
 8000db8:	401a      	ands	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	683a      	ldr	r2, [r7, #0]
 8000dc4:	7992      	ldrb	r2, [r2, #6]
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	697a      	ldr	r2, [r7, #20]
 8000dca:	b292      	uxth	r2, r2
 8000dcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd0:	b292      	uxth	r2, r2
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2103      	movs	r1, #3
 8000de4:	fa01 f303 	lsl.w	r3, r1, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	401a      	ands	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	79db      	ldrb	r3, [r3, #7]
 8000df8:	4619      	mov	r1, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000e02:	431a      	orrs	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d985      	bls.n	8000d20 <GPIO_Init+0x1c>
    }
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	371c      	adds	r7, #28
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b085      	sub	sp, #20
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	807b      	strh	r3, [r7, #2]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e3a:	787a      	ldrb	r2, [r7, #1]
 8000e3c:	887b      	ldrh	r3, [r7, #2]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000e4a:	887b      	ldrh	r3, [r7, #2]
 8000e4c:	08db      	lsrs	r3, r3, #3
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	210f      	movs	r1, #15
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	8879      	ldrh	r1, [r7, #2]
 8000e6c:	08c9      	lsrs	r1, r1, #3
 8000e6e:	b289      	uxth	r1, r1
 8000e70:	4608      	mov	r0, r1
 8000e72:	ea02 0103 	and.w	r1, r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f100 0208 	add.w	r2, r0, #8
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	08db      	lsrs	r3, r3, #3
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	461a      	mov	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	68b9      	ldr	r1, [r7, #8]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ec0:	78fb      	ldrb	r3, [r7, #3]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d006      	beq.n	8000ed4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000eca:	4909      	ldr	r1, [pc, #36]	@ (8000ef0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	630b      	str	r3, [r1, #48]	@ 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ed2:	e006      	b.n	8000ee2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4904      	ldr	r1, [pc, #16]	@ (8000ef0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	630b      	str	r3, [r1, #48]	@ 0x30
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d006      	beq.n	8000f14 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	@ (8000f30 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f0a:	4909      	ldr	r1, [pc, #36]	@ (8000f30 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	640b      	str	r3, [r1, #64]	@ 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000f12:	e006      	b.n	8000f22 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	4904      	ldr	r1, [pc, #16]	@ (8000f30 <RCC_APB1PeriphClockCmd+0x3c>)
 8000f1e:	4013      	ands	r3, r2
 8000f20:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800

08000f34 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000f46:	4b0a      	ldr	r3, [pc, #40]	@ (8000f70 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f4a:	4909      	ldr	r1, [pc, #36]	@ (8000f70 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	644b      	str	r3, [r1, #68]	@ 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000f52:	e006      	b.n	8000f62 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f56:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	4904      	ldr	r1, [pc, #16]	@ (8000f70 <RCC_APB2PeriphClockCmd+0x3c>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	644b      	str	r3, [r1, #68]	@ 0x44
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800

08000f74 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a29      	ldr	r2, [pc, #164]	@ (8001030 <TIM_TimeBaseInit+0xbc>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <TIM_TimeBaseInit+0x44>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a28      	ldr	r2, [pc, #160]	@ (8001034 <TIM_TimeBaseInit+0xc0>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00f      	beq.n	8000fb8 <TIM_TimeBaseInit+0x44>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f9e:	d00b      	beq.n	8000fb8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a25      	ldr	r2, [pc, #148]	@ (8001038 <TIM_TimeBaseInit+0xc4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d007      	beq.n	8000fb8 <TIM_TimeBaseInit+0x44>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a24      	ldr	r2, [pc, #144]	@ (800103c <TIM_TimeBaseInit+0xc8>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d003      	beq.n	8000fb8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <TIM_TimeBaseInit+0xcc>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d108      	bne.n	8000fca <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000fbe:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	885a      	ldrh	r2, [r3, #2]
 8000fc4:	89fb      	ldrh	r3, [r7, #14]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001044 <TIM_TimeBaseInit+0xd0>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d00c      	beq.n	8000fec <TIM_TimeBaseInit+0x78>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001048 <TIM_TimeBaseInit+0xd4>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d008      	beq.n	8000fec <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000fe0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	891a      	ldrh	r2, [r3, #8]
 8000fe6:	89fb      	ldrh	r3, [r7, #14]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	89fa      	ldrh	r2, [r7, #14]
 8000ff0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	62da      	str	r2, [r3, #44]	@ 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	881a      	ldrh	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	851a      	strh	r2, [r3, #40]	@ 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0a      	ldr	r2, [pc, #40]	@ (8001030 <TIM_TimeBaseInit+0xbc>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d003      	beq.n	8001012 <TIM_TimeBaseInit+0x9e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <TIM_TimeBaseInit+0xc0>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d104      	bne.n	800101c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	7a9b      	ldrb	r3, [r3, #10]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	829a      	strh	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40010000 	.word	0x40010000
 8001034:	40010400 	.word	0x40010400
 8001038:	40000400 	.word	0x40000400
 800103c:	40000800 	.word	0x40000800
 8001040:	40000c00 	.word	0x40000c00
 8001044:	40001000 	.word	0x40001000
 8001048:	40001400 	.word	0x40001400

0800104c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001058:	78fb      	ldrb	r3, [r7, #3]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d008      	beq.n	8001070 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800106e:	e007      	b.n	8001080 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	b29b      	uxth	r3, r3
 8001076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800107a:	b29a      	uxth	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	801a      	strh	r2, [r3, #0]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001098:	78fb      	ldrb	r3, [r7, #3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d008      	beq.n	80010b0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80010ae:	e007      	b.n	80010c0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	881b      	ldrh	r3, [r3, #0]
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	801a      	strh	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	817b      	strh	r3, [r7, #10]
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
 80010de:	2300      	movs	r3, #0
 80010e0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	8c1b      	ldrh	r3, [r3, #32]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	8c1b      	ldrh	r3, [r3, #32]
 80010f6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	889b      	ldrh	r3, [r3, #4]
 80010fc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	8b9b      	ldrh	r3, [r3, #28]
 8001102:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001104:	897b      	ldrh	r3, [r7, #10]
 8001106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800110a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800110c:	897b      	ldrh	r3, [r7, #10]
 800110e:	f023 0303 	bic.w	r3, r3, #3
 8001112:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	897b      	ldrh	r3, [r7, #10]
 800111a:	4313      	orrs	r3, r2
 800111c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800111e:	89fb      	ldrh	r3, [r7, #14]
 8001120:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001124:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	899b      	ldrh	r3, [r3, #12]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b29a      	uxth	r2, r3
 800112e:	89fb      	ldrh	r3, [r7, #14]
 8001130:	4313      	orrs	r3, r2
 8001132:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	885b      	ldrh	r3, [r3, #2]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29a      	uxth	r2, r3
 800113c:	89fb      	ldrh	r3, [r7, #14]
 800113e:	4313      	orrs	r3, r2
 8001140:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a22      	ldr	r2, [pc, #136]	@ (80011d0 <TIM_OC3Init+0x104>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d003      	beq.n	8001152 <TIM_OC3Init+0x86>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a21      	ldr	r2, [pc, #132]	@ (80011d4 <TIM_OC3Init+0x108>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12b      	bne.n	80011aa <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001158:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	89db      	ldrh	r3, [r3, #14]
 800115e:	021b      	lsls	r3, r3, #8
 8001160:	b29a      	uxth	r2, r3
 8001162:	89fb      	ldrh	r3, [r7, #14]
 8001164:	4313      	orrs	r3, r2
 8001166:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001168:	89fb      	ldrh	r3, [r7, #14]
 800116a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800116e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	889b      	ldrh	r3, [r3, #4]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b29a      	uxth	r2, r3
 8001178:	89fb      	ldrh	r3, [r7, #14]
 800117a:	4313      	orrs	r3, r2
 800117c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001184:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001186:	89bb      	ldrh	r3, [r7, #12]
 8001188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800118c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	8a1b      	ldrh	r3, [r3, #16]
 8001192:	011b      	lsls	r3, r3, #4
 8001194:	b29a      	uxth	r2, r3
 8001196:	89bb      	ldrh	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	8a5b      	ldrh	r3, [r3, #18]
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	89ba      	ldrh	r2, [r7, #12]
 80011ae:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	897a      	ldrh	r2, [r7, #10]
 80011b4:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	89fa      	ldrh	r2, [r7, #14]
 80011c2:	841a      	strh	r2, [r3, #32]
}
 80011c4:	bf00      	nop
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	40010000 	.word	0x40010000
 80011d4:	40010400 	.word	0x40010400

080011d8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	81bb      	strh	r3, [r7, #12]
 80011e6:	2300      	movs	r3, #0
 80011e8:	817b      	strh	r3, [r7, #10]
 80011ea:	2300      	movs	r3, #0
 80011ec:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	8c1b      	ldrh	r3, [r3, #32]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	8c1b      	ldrh	r3, [r3, #32]
 8001202:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	889b      	ldrh	r3, [r3, #4]
 8001208:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8b9b      	ldrh	r3, [r3, #28]
 800120e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001210:	89bb      	ldrh	r3, [r7, #12]
 8001212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001216:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001218:	89bb      	ldrh	r3, [r7, #12]
 800121a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800121e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	881b      	ldrh	r3, [r3, #0]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b29a      	uxth	r2, r3
 8001228:	89bb      	ldrh	r3, [r7, #12]
 800122a:	4313      	orrs	r3, r2
 800122c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800122e:	897b      	ldrh	r3, [r7, #10]
 8001230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001234:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	899b      	ldrh	r3, [r3, #12]
 800123a:	031b      	lsls	r3, r3, #12
 800123c:	b29a      	uxth	r2, r3
 800123e:	897b      	ldrh	r3, [r7, #10]
 8001240:	4313      	orrs	r3, r2
 8001242:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	885b      	ldrh	r3, [r3, #2]
 8001248:	031b      	lsls	r3, r3, #12
 800124a:	b29a      	uxth	r2, r3
 800124c:	897b      	ldrh	r3, [r7, #10]
 800124e:	4313      	orrs	r3, r2
 8001250:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a12      	ldr	r2, [pc, #72]	@ (80012a0 <TIM_OC4Init+0xc8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d003      	beq.n	8001262 <TIM_OC4Init+0x8a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a11      	ldr	r2, [pc, #68]	@ (80012a4 <TIM_OC4Init+0xcc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d10a      	bne.n	8001278 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001268:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	8a1b      	ldrh	r3, [r3, #16]
 800126e:	019b      	lsls	r3, r3, #6
 8001270:	b29a      	uxth	r2, r3
 8001272:	89fb      	ldrh	r3, [r7, #14]
 8001274:	4313      	orrs	r3, r2
 8001276:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	89fa      	ldrh	r2, [r7, #14]
 800127c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	89ba      	ldrh	r2, [r7, #12]
 8001282:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	897a      	ldrh	r2, [r7, #10]
 8001290:	841a      	strh	r2, [r3, #32]
}
 8001292:	bf00      	nop
 8001294:	3714      	adds	r7, #20
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	40010000 	.word	0x40010000
 80012a4:	40010400 	.word	0x40010400

080012a8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	8b9b      	ldrh	r3, [r3, #28]
 80012bc:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80012be:	89fb      	ldrh	r3, [r7, #14]
 80012c0:	f023 0308 	bic.w	r3, r3, #8
 80012c4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80012c6:	89fa      	ldrh	r2, [r7, #14]
 80012c8:	887b      	ldrh	r3, [r7, #2]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	89fa      	ldrh	r2, [r7, #14]
 80012d2:	839a      	strh	r2, [r3, #28]
}
 80012d4:	bf00      	nop
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8b9b      	ldrh	r3, [r3, #28]
 80012f4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80012f6:	89fb      	ldrh	r3, [r7, #14]
 80012f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012fc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80012fe:	887b      	ldrh	r3, [r7, #2]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b29a      	uxth	r2, r3
 8001304:	89fb      	ldrh	r3, [r7, #14]
 8001306:	4313      	orrs	r3, r2
 8001308:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	89fa      	ldrh	r2, [r7, #14]
 800130e:	839a      	strh	r2, [r3, #28]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	807b      	strh	r3, [r7, #2]
 8001328:	4613      	mov	r3, r2
 800132a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800132c:	787b      	ldrb	r3, [r7, #1]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d008      	beq.n	8001344 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	899b      	ldrh	r3, [r3, #12]
 8001336:	b29a      	uxth	r2, r3
 8001338:	887b      	ldrh	r3, [r7, #2]
 800133a:	4313      	orrs	r3, r2
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001342:	e009      	b.n	8001358 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	899b      	ldrh	r3, [r3, #12]
 8001348:	b29a      	uxth	r2, r3
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	43db      	mvns	r3, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	4013      	ands	r3, r2
 8001352:	b29a      	uxth	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	819a      	strh	r2, [r3, #12]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	43db      	mvns	r3, r3
 8001374:	b29a      	uxth	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	821a      	strh	r2, [r3, #16]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001396:	787b      	ldrb	r3, [r7, #1]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d008      	beq.n	80013ae <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	899b      	ldrh	r3, [r3, #12]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80013ac:	e009      	b.n	80013c2 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	899b      	ldrh	r3, [r3, #12]
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	4013      	ands	r3, r2
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	819a      	strh	r2, [r3, #12]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013d4:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <SystemInit+0x50>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <SystemInit+0x50>)
 80013da:	f043 0301 	orr.w	r3, r3, #1
 80013de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <SystemInit+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001420 <SystemInit+0x50>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a0d      	ldr	r2, [pc, #52]	@ (8001420 <SystemInit+0x50>)
 80013ec:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <SystemInit+0x50>)
 80013f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <SystemInit+0x54>)
 80013fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013fc:	4b08      	ldr	r3, [pc, #32]	@ (8001420 <SystemInit+0x50>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	@ (8001420 <SystemInit+0x50>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <SystemInit+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */

  /* Configure the System clock source, PLL Multiplier and Divider factors,
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800140e:	f000 f80d 	bl	800142c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <SystemInit+0x58>)
 8001414:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001418:	609a      	str	r2, [r3, #8]
#endif
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800
 8001424:	24003010 	.word	0x24003010
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <SetSysClock+0xe8>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a35      	ldr	r2, [pc, #212]	@ (8001514 <SetSysClock+0xe8>)
 8001440:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001444:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001446:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <SetSysClock+0xe8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3301      	adds	r3, #1
 8001454:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <SetSysClock+0x38>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001462:	d1f0      	bne.n	8001446 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001464:	4b2b      	ldr	r3, [pc, #172]	@ (8001514 <SetSysClock+0xe8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001470:	2301      	movs	r3, #1
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	e001      	b.n	800147a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d142      	bne.n	8001506 <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001480:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <SetSysClock+0xe8>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <SetSysClock+0xe8>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR |= PWR_CR_PMODE;
 800148c:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <SetSysClock+0xec>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a21      	ldr	r2, [pc, #132]	@ (8001518 <SetSysClock+0xec>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001498:	4b1e      	ldr	r3, [pc, #120]	@ (8001514 <SetSysClock+0xe8>)
 800149a:	4a1e      	ldr	r2, [pc, #120]	@ (8001514 <SetSysClock+0xe8>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	6093      	str	r3, [r2, #8]

    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <SetSysClock+0xe8>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <SetSysClock+0xe8>)
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014aa:	6093      	str	r3, [r2, #8]

    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <SetSysClock+0xe8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <SetSysClock+0xe8>)
 80014b2:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80014b6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <SetSysClock+0xe8>)
 80014ba:	4a18      	ldr	r2, [pc, #96]	@ (800151c <SetSysClock+0xf0>)
 80014bc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <SetSysClock+0xe8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a14      	ldr	r2, [pc, #80]	@ (8001514 <SetSysClock+0xe8>)
 80014c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80014ca:	bf00      	nop
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <SetSysClock+0xe8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f9      	beq.n	80014cc <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <SetSysClock+0xf4>)
 80014da:	f240 6205 	movw	r2, #1541	@ 0x605
 80014de:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <SetSysClock+0xe8>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <SetSysClock+0xe8>)
 80014e6:	f023 0303 	bic.w	r3, r3, #3
 80014ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <SetSysClock+0xe8>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a08      	ldr	r2, [pc, #32]	@ (8001514 <SetSysClock+0xe8>)
 80014f2:	f043 0302 	orr.w	r3, r3, #2
 80014f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80014f8:	bf00      	nop
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SetSysClock+0xe8>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b08      	cmp	r3, #8
 8001504:	d1f9      	bne.n	80014fa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40023800 	.word	0x40023800
 8001518:	40007000 	.word	0x40007000
 800151c:	07405408 	.word	0x07405408
 8001520:	40023c00 	.word	0x40023c00

08001524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800155c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001528:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800152a:	e003      	b.n	8001534 <LoopCopyDataInit>

0800152c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800152c:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800152e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001530:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001532:	3104      	adds	r1, #4

08001534 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001534:	480b      	ldr	r0, [pc, #44]	@ (8001564 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001536:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001538:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800153a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800153c:	d3f6      	bcc.n	800152c <CopyDataInit>
  ldr  r2, =_sbss
 800153e:	4a0b      	ldr	r2, [pc, #44]	@ (800156c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001540:	e002      	b.n	8001548 <LoopFillZerobss>

08001542 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001542:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001544:	f842 3b04 	str.w	r3, [r2], #4

08001548 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001548:	4b09      	ldr	r3, [pc, #36]	@ (8001570 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800154a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800154c:	d3f9      	bcc.n	8001542 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154e:	f7ff ff3f 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001552:	f000 f811 	bl	8001578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7fe fe7b 	bl	8000250 <main>
  bx  lr    
 800155a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800155c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001560:	080015e0 	.word	0x080015e0
  ldr  r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001568:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 800156c:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8001570:	20012d1c 	.word	0x20012d1c

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <__libc_init_array>:
 8001578:	b570      	push	{r4, r5, r6, lr}
 800157a:	4d0d      	ldr	r5, [pc, #52]	@ (80015b0 <__libc_init_array+0x38>)
 800157c:	4c0d      	ldr	r4, [pc, #52]	@ (80015b4 <__libc_init_array+0x3c>)
 800157e:	1b64      	subs	r4, r4, r5
 8001580:	10a4      	asrs	r4, r4, #2
 8001582:	2600      	movs	r6, #0
 8001584:	42a6      	cmp	r6, r4
 8001586:	d109      	bne.n	800159c <__libc_init_array+0x24>
 8001588:	4d0b      	ldr	r5, [pc, #44]	@ (80015b8 <__libc_init_array+0x40>)
 800158a:	4c0c      	ldr	r4, [pc, #48]	@ (80015bc <__libc_init_array+0x44>)
 800158c:	f000 f818 	bl	80015c0 <_init>
 8001590:	1b64      	subs	r4, r4, r5
 8001592:	10a4      	asrs	r4, r4, #2
 8001594:	2600      	movs	r6, #0
 8001596:	42a6      	cmp	r6, r4
 8001598:	d105      	bne.n	80015a6 <__libc_init_array+0x2e>
 800159a:	bd70      	pop	{r4, r5, r6, pc}
 800159c:	f855 3b04 	ldr.w	r3, [r5], #4
 80015a0:	4798      	blx	r3
 80015a2:	3601      	adds	r6, #1
 80015a4:	e7ee      	b.n	8001584 <__libc_init_array+0xc>
 80015a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80015aa:	4798      	blx	r3
 80015ac:	3601      	adds	r6, #1
 80015ae:	e7f2      	b.n	8001596 <__libc_init_array+0x1e>
 80015b0:	080015d8 	.word	0x080015d8
 80015b4:	080015d8 	.word	0x080015d8
 80015b8:	080015d8 	.word	0x080015d8
 80015bc:	080015dc 	.word	0x080015dc

080015c0 <_init>:
 80015c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015c2:	bf00      	nop
 80015c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c6:	bc08      	pop	{r3}
 80015c8:	469e      	mov	lr, r3
 80015ca:	4770      	bx	lr

080015cc <_fini>:
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ce:	bf00      	nop
 80015d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015d2:	bc08      	pop	{r3}
 80015d4:	469e      	mov	lr, r3
 80015d6:	4770      	bx	lr
